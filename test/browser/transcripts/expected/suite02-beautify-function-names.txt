ns               Testing dirac.tests.tasks.suite02.beautify-function-names
automate         open-scenario! ["breakpoint"]
testing          enabled :beautify-function-names feature
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #1
devtools #1      implant initialized
devtools #1      reset devtools settings
devtools #1      devtools ready
devtools #1      setCurrentPanel: elements
devtools #1      namespacesCache is cool now
automate         trigger! [:pause-on-breakpoint]
devtools #1      setCurrentPanel: sources
automate #1      scrape! [:callstack-pane-functions]
stdout           displayed 7 items:
                  * breakpoint-demo / dirac.tests.scenarios.breakpoint.core/breakpoint-demo
                  * breakpoint-demo-handler / dirac.tests.scenarios.breakpoint.core/breakpoint-demo-handler
                  * (anonymous function)
                  * call-trigger! / dirac.automation.scenario/call-trigger!
                  * notification-handler! / dirac.automation.scenario/notification-handler!
                  * process-notification! / dirac.automation.notifications/process-notification!
                  * process-event! / dirac.automation.notifications/process-event!
automate #1      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #1
∎
automate         close-scenario! ["scenario-tab#1"]
automate         open-scenario! ["breakpoint"]
testing          disabled :beautify-function-names feature
automate         store-options!
automate         set-options! [{:beautify-function-names false}]
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #2
devtools #2      implant initialized
devtools #2      reset devtools settings
devtools #2      devtools ready
devtools #2      setCurrentPanel: elements
devtools #2      namespacesCache is cool now
automate         trigger! [:pause-on-breakpoint]
devtools #2      setCurrentPanel: sources
automate #2      scrape! [:callstack-pane-functions]
stdout           displayed 7 items:
                  * dirac$tests$scenarios$breakpoint$core$breakpoint_demo
                  * dirac$tests$scenarios$breakpoint$core$breakpoint_demo_handler
                  * (anonymous function)
                  * dirac$automation$scenario$call_trigger_BANG_
                  * dirac$automation$scenario$notification_handler_BANG_
                  * dirac$automation$notifications$process_notification_BANG_
                  * dirac$automation$notifications$process_event_BANG_
automate #2      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #2
automate         restore-options!
∎
automate         close-scenario! ["scenario-tab#2"]
automate         open-scenario! ["exception"]
testing          trigger exception with non-trivial callstack
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #3
devtools #3      implant initialized
devtools #3      reset devtools settings
devtools #3      devtools ready
devtools #3      setCurrentPanel: elements
devtools #3      namespacesCache is cool now
automate #3      switch-to-console-panel!
devtools #3      console initialized
devtools #3      adopt-prompt-element use-parinfer? true
devtools #3      setDiracPromptMode('status')
devtools #3      ConsoleView constructed
devtools #3      displayWelcomeMessage
devtools #3      setCurrentPanel: console
automate         trigger! [:cause-exception]
scenario         uncaught exception: Error: :invalid is not ISeqable
automate #3      scrape! [:function-names-in-last-console-exception]
stdout           displayed 28 items:
                  * seq
                  * IFn:-invoke³ (seq-reduce)
                  * IFn:-invoke³ (reduce)
                  * IFn:-invoke² (into)
                  * into
                  * crash!
                  * crash-or-break!
                  * ITestProtocol:-pmethod⁴ (TestType)
                  * IFn:-invoke⁴ (-pmethod)
                  * -pmethod
                  * ITestProtocol:-pmethod³ (TestType)
                  * IFn:-invoke³ (-pmethod)
                  * -pmethod
                  * excercise-protocol!
                  * IFn:-invokeⁿ (multi-arity-fn)
                  * multi-arity-fn
                  * IFn:-invoke² (multi-arity-fn)
                  * multi-arity-fn
                  * IFn:-invoke⁰ (multi-arity-fn)
                  * multi-arity-fn
                  * fancy-$%$#%$#-function???-name
                  * exception-demo!
                  * exception-demo-handler
                  * (anonymous function)
                  * call-trigger!
                  * notification-handler!
                  * process-notification!
                  * process-event!
automate #3      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #3
∎
automate         close-scenario! ["scenario-tab#3"]
automate         open-scenario! ["core-async"]
testing          core async stack traces
automate         open-devtools!
extension        handling command: open-dirac-devtools
extension        register devtools #4
devtools #4      implant initialized
devtools #4      reset devtools settings
devtools #4      devtools ready
devtools #4      setCurrentPanel: elements
devtools #4      namespacesCache is cool now
automate         trigger! [:async]
devtools #4      setCurrentPanel: sources
automate #4      scrape! [:callstack-pane-functions]
stdout           displayed 10 items:
                  * break-here! / dirac.tests.scenarios.core-async/break-here!
                  * (anonymous function)
                  * (anonymous function)
                  * break-async-$-state-machine--*gen-num*--auto----*gen-num* / dirac.tests.scenarios.core-async/break-async-$-state-machine--*gen-num*--auto----*gen-num*
                  * break-async-$-state-machine--*gen-num*--auto-- / dirac.tests.scenarios.core-async/break-async-$-state-machine--*gen-num*--auto--
                  * run-state-machine / cljs.core.async.impl.ioc-helpers/run-state-machine
                  * run-state-machine-wrapped / cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped
                  * (anonymous function)
                  * (anonymous function)
                  * process-messages / cljs.core.async.impl.dispatch/process-messages
automate #4      close-devtools!
extension        handling command: close-dirac-devtools
extension        unregister devtools #4
∎
automate         close-scenario! ["scenario-tab#4"]
summary          Automated 28 actions with 11 check-points containing 4 assertions.
                 0 failures, 0 errors.
